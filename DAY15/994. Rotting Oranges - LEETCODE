class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        return orangesRot(grid);
    }

     int orangesRot(vector<vector<int>>& mat) {
        int n = mat.size(), m = mat[0].size();
        queue<pair<int, int>> q;
        int fresh = 0, time = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 2) 
                    q.push(make_pair(i, j));
                else if (mat[i][j] == 1) 
                    fresh++;
            }
        }

        while (!q.empty() && fresh > 0) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                pair<int, int> p = q.front(); 
                q.pop();
                int x = p.first, y = p.second;

                if (x > 0 && mat[x - 1][y] == 1) {
                    mat[x - 1][y] = 2; q.push(make_pair(x - 1, y)); fresh--;
                }
                if (x < n - 1 && mat[x + 1][y] == 1) {
                    mat[x + 1][y] = 2; q.push(make_pair(x + 1, y)); fresh--;
                }
                if (y > 0 && mat[x][y - 1] == 1) {
                    mat[x][y - 1] = 2; q.push(make_pair(x, y - 1)); fresh--;
                }
                if (y < m - 1 && mat[x][y + 1] == 1) {
                    mat[x][y + 1] = 2; q.push(make_pair(x, y + 1)); fresh--;
                }
            }
            time++;
        }

        return (fresh == 0) ? time : -1;
    }

};
