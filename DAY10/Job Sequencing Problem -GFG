class Solution {
public:
    int findSlot(vector<int>& parent, int slot) {
        if (parent[slot] == slot) return slot;
        return parent[slot] = findSlot(parent, parent[slot]);
    }

    vector<int> jobSequencing(vector<int> &deadline, vector<int> &profit) {
        int n = deadline.size();
        vector<pair<int, int>> jobs;
        
        for (int i = 0; i < n; i++)
            jobs.push_back({profit[i], deadline[i]});
        
        sort(jobs.rbegin(), jobs.rend());

        int maxDeadline = *max_element(deadline.begin(), deadline.end());
        vector<int> parent(maxDeadline + 1);
        for (int i = 0; i <= maxDeadline; i++)
            parent[i] = i;

        int jobCount = 0, totalProfit = 0;
        
        for (int i = 0; i < n; i++) {
            int availableSlot = findSlot(parent, min(jobs[i].second, maxDeadline));
            if (availableSlot > 0) {
                totalProfit += jobs[i].first;
                jobCount++;
                parent[availableSlot] = findSlot(parent, availableSlot - 1);
            }
        }
        
        return {jobCount, totalProfit};
    }
};
