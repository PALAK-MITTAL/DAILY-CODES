class Solution {
  public:
    int matrixMultiplication(vector<int> &arr) {
        // code here
        int n= arr.size();
        if(n<=2) return 0;
        vector<vector<int>> dp(n, vector<int>(n, 0));

    for (int len = 2; len < n; len++) {
        for (int i = 1; i < n - len + 1; i++) {
            int j = i + len - 1;
            dp[i][j] = INT_MAX;

            for (int k = i; k < j; k++) {
                int cost = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j];
                dp[i][j] = min(dp[i][j], cost);
            }
        }
    }

    return dp[1][n - 1];
    }
    
//     int matrixChainMultiplication(vector<int> &arr, int i, int j) {
//     if (i == j) return 0; 
//     int minCost = INT_MAX;

//     for (int k = i; k < j; k++) {
//         int cost = matrixChainMultiplication(arr, i, k) +
//                   matrixChainMultiplication(arr, k + 1, j) +
//                   arr[i - 1] * arr[k] * arr[j];

//         minCost = min(minCost, cost);
//     }

//     return minCost;
// }
    
};
